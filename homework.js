// 15.1.23.

// 1. Массивы
// 2. Объекты
// 3. Занести на GitHub проект
// 4. Перенести документацию +
// 5. Украсить readme +
// 6. Почистить GITHUB +
// 7. Попробовать перименить знания на практике

//19.1.23

//1 Объекты +
//2 Разобраться с Trello +
//3. Занести на GitHub проект
//4. Создать репозиторий на GitHub с порталом +

// 20.01.23

// 1. Ссылочный тип данных - это, в отличии от примитивных тиов данных,
//      динамический тип, который содержит в себе другие типы данных и примитивы и непримитивы, Примерами служат функции и массивы. +
// 2. Дата и Время в JavaScript
// 3. Ключевое слово this
// 4. Чейнинг - иными словами это Цепочка функций — это шаблон в JavaScript, в котором несколько функций
//      последовательно вызываются для одного и того же объекта. Используя одну и ту же ссылку на объект,
//      можно вызывать несколько функций. Это повышает читаемость кода и означает меньшее количество избыточных объектов. 
//      так же чейнинг можно использовать при создании массивов, придавая одному массиву несколькор значений в одной строке
//      Например: const str = new Aray(500).fill(0).map((e, i) => i + 1).sumElement()  // выведет в консоль цифры от 0 до 500. +
// 5. Превратить массив в объект
            // const arrToObj = (obj) => {
            //     let newArray = [];
            //     for (xxx in obj) {                    // просматриваю все элементы массива
            //         if (obj[xxx]!==undefined) {       // проверяю не является ли элемент undefined
            //             newArray[xxx] = array[xxx];   // если элемент определен, то перенести его в объект
            //         }
            //     }
            //     return newArray
            // };
// 6. Различие spread от rest, создать функцию с rest.
        // spread оператор берет каждый отдельный элемент массива и расааковывает его в другой массивый 
        // оператор rest противоположен spread, он забирает каждый элемент из массива и создает из них новый массив 
        // Напирмер:
        const price = 500;
        const delivery = 200;
        // const rest = [3, 10, 6, 20]
        const restFuncGood = (price, delivery, ...rest) => {
            console.log(price);
            console.log(delivery);
            return rest.map((quantity) => {
                return price * quantity + delivery;
            });
        };
        restFuncGood(500, 200, 3, 10, 6, 20)

        // Либо 

        const goodName = ['Good name', 2222, 5, 6, 10, 15, 18]

        const [name, id, ...rest] = goodName;
        console.log(name);
        console.log(id);
        console.log(rest);
// 7. trello +